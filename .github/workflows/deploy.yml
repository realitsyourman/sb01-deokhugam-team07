# main 브랜치에 merge 될때 실행
on:
  push:
    branches:
      - main

# 동시성 제어, main 브랜치에서 이미 실행되고 있으면 취소
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}


jobs:
  build_and_test:
    name: 빌드 및 테스트
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Gradle 캐시
        id: cache-gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Java 설정
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Gradle 실행 권한 설정
        run: chmod +x gradlew

      - name: Gradle 빌드 및 테스트
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew clean test

  build_and_push:
    name: AWS 설정 및 Docker 빌드, 푸시
    needs: build_and_test # 테스트 통과 후
    runs-on: ubuntu-latest
    permissions: # OIDC 권할 설정
      id-token: write
      contents: read
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: us-east-1

      # BuildKit 캐시 사용해서 빌드 속도 향상
      - name: QEMU 설정
        uses: docker/setup-qemu-action@v2

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      - name: Public ECR 로그인
        run: |
          aws ecr-public get-login-password \
            --region us-east-1 \
          | docker login \
            --username AWS \
            --password-stdin public.ecr.aws

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY_URI }}:latest
            ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          cache-from: type=gha # Github Actions에서 캐시 꺼내기
          cache-to: type=gha,mode=max # 빌드 후 캐시 저장

  # ECS 배포
  deploy:
    name: ECS 배포
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: ECS 태스크 정의 실행
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

      - name: 실행 중인 태스크 중지
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0

      - name: ECS 서비스 배포
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
          desired-count: 1
